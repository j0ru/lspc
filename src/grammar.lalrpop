use std::str::FromStr;
use crate::ast::{Expr, Opcode};

grammar;

pub Expr: Box<Expr> = {
  Expr ExprOp Factor => Box::new(Expr::Op(<>)),
  Factor,
};

ExprOp: Opcode = {
  "+" => Opcode::Add,
  "-" => Opcode::Sub,
};

Factor: Box<Expr> ={
  Factor FactorOp Term => Box::new(Expr::Op(<>)),
  Term,
};

FactorOp: Opcode = {
  "*" => Opcode::Mul,
  "/" => Opcode::Div,
};

Term: Box<Expr> = {
  Num => Box::new(Expr::Number(<>)),
  Ident =>Box::new(Expr::Ident(<>)),
  "(" <Expr> ")"
};

Num: i32 = { DecNum, HexNum };

DecNum: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
HexNum: i32 = <s:r"0x[0-9a-fA-F]+"> => {
  i32::from_str_radix(&s[2..s.len()], 16).unwrap()
};
Ident: String = r"[a-zA-Z][a-zA-Z0-9]*" => String::from(<>);
