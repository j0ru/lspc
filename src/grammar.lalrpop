use std::str::FromStr;
use crate::ast::{Expr, Opcode, Statement};

grammar;

pub Program: Vec<Box<Statement>> = {
  StatementList
}

StatementList: Vec<Box<Statement>> = {
  <mut v:(<Stmt> ";")*> <e:Stmt?> => match e {
    Some(e) => {v.push(e); v},
    None => v,
  }
}

Stmt: Box<Statement> = {
  PrintStatement
}

PrintStatement: Box<Statement> = {
  "print" <Expr> => Box::new(Statement::Print(<>))
}

Expr: Box<Expr> = {
  Expr ExprOp Factor => Box::new(Expr::Op(<>)),
  Factor,
};

ExprOp: Opcode = {
  "+" => Opcode::Add,
  "-" => Opcode::Sub,
};

Factor: Box<Expr> ={
  Factor FactorOp Term => Box::new(Expr::Op(<>)),
  Term,
};

FactorOp: Opcode = {
  "*" => Opcode::Mul,
  "/" => Opcode::Div,
};

Term: Box<Expr> = {
  IntLit => Box::new(Expr::Number(<>)),
  FloatLit => Box::new(Expr::Float(<>)),
  Ident =>Box::new(Expr::Ident(<>)),
  "(" <Expr> ")"
};

IntLit: i32 = { DecInt, HexInt };

DecInt: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
HexInt: i32 = <s:r"0x[0-9a-fA-F]+"> => {
  i32::from_str_radix(&s[2..s.len()], 16).unwrap()
};

FloatLit: f32 = r"[0-9]+\.[0-9]*" => <>.parse::<f32>().unwrap();
Ident: String = r"[a-zA-Z][a-zA-Z0-9]*" => String::from(<>);
